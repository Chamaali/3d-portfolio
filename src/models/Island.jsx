/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import {useCallback, useEffect, useRef} from "react";
import {useGLTF} from "@react-three/drei";


import islandScene from '../assets/3d/island.glb'
import {a} from '@react-spring/three'
import {useFrame, useThree} from "@react-three/fiber";
import {log} from "three/examples/jsm/nodes/math/MathNode.js";

export const Island = ({
                           isRotating,
                           setIsRotating,
                           setCurrentStage,
                           setIsSpeedNull,
                           setIslandRotationValue,
                           islandRotationValue,
                           setIslandSpeedValue,
                           ...props}) => {
    const islandRef = useRef()
    const {gl, viewport} = useThree()
    const {nodes, materials} = useGLTF(islandScene);

    const lastX = useRef(0)
    const rotationSpeed = useRef(0)
    const dampingFactor = 0.95;

    const handlePointerDown = useCallback((e) => {
        e.stopPropagation();
        e.preventDefault()
        setIsRotating(true)

        lastX.current = e.touches
            ? e.touches[0].clientX
            : e.clientX
        
    }, [setIsRotating, lastX]);

    const handlePointerUp = useCallback((e) => {
        e.stopPropagation();
        e.preventDefault()
        setIsRotating(false)

    }, [setIsRotating]);

    const handlePointerMove = useCallback((e) => {
        e.stopPropagation();
        e.preventDefault();
        let clientX;
        let delta;
        const sensitivity = 0.001

        if (isRotating) {
            if (!e.touches){
                clientX = e.clientX
                delta = (clientX - lastX.current) / viewport.width
                lastX.current = clientX
            } else {
                clientX = e.touches[0].clientX
                delta = (clientX - lastX.current) * sensitivity
            }


            rotationSpeed.current = delta * 0.01 * Math.PI
            islandRef.current.rotation.y += delta * 0.01 * Math.PI
            setIslandSpeedValue(rotationSpeed.current)
            setIsSpeedNull(false)
        }
    }, [isRotating, viewport.width, setIslandSpeedValue, setIsSpeedNull]);

    const handleKeyDown = useCallback((e) => {
        if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
            const rotatingFactor = 0.01 * Math.PI
            setIsRotating(true)
            setIsSpeedNull(false)
            if(e.key === 'ArrowLeft'){
                islandRef.current.rotation.y += rotatingFactor
                rotationSpeed.current = 0.009;
                setIslandSpeedValue(rotatingFactor)
            } else {
                islandRef.current.rotation.y -= rotatingFactor
                rotationSpeed.current = -0.009;
                setIslandSpeedValue(-rotatingFactor)
            }
           
        }
    }, [setIsRotating, setIsSpeedNull, setIslandSpeedValue]);

    const handleKeyUp = useCallback((e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
            setIsRotating(false)
            setIslandSpeedValue(0)
        }
    }, [setIsRotating, setIslandSpeedValue]);

    useFrame(() => {
        if (!isRotating) {
            rotationSpeed.current *= dampingFactor
            setIslandSpeedValue(rotationSpeed.current)

            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0
                setIsSpeedNull(true)
            }

            islandRef.current.rotation.y += rotationSpeed.current

        } else {
            setIslandRotationValue(islandRef.current.rotation.y)
            const normalizedRotation =
                ((islandRotationValue % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown)
        canvas.addEventListener('pointerup', handlePointerUp)
        canvas.addEventListener('pointermove', handlePointerMove)
        canvas.addEventListener('touchend', handlePointerUp)
        canvas.addEventListener('touchmove', handlePointerMove)
        canvas.addEventListener('touchstart', handlePointerDown)
        document.addEventListener('keydown', handleKeyDown)
        document.addEventListener('keyup', handleKeyUp)

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown)
            canvas.removeEventListener('pointerup', handlePointerUp)
            canvas.removeEventListener('pointermove', handlePointerMove)
            canvas.removeEventListener('touchend', handlePointerUp)
            canvas.removeEventListener('touchmove', handlePointerMove)
            canvas.removeEventListener('touchstart', handlePointerDown)
            document.removeEventListener('keydown', handleKeyDown)
            document.removeEventListener('keyup', handleKeyUp)
        }
    }, [gl, handlePointerDown, handlePointerUp, handleKeyDown, handleKeyUp, handlePointerMove])

    return (
        <a.group {...props} ref={islandRef}>
            <mesh
                geometry={nodes.polySurface944_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.polySurface945_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.polySurface946_tree2_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.polySurface947_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.polySurface948_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.polySurface949_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh
                geometry={nodes.pCube11_rocks1_0.geometry}
                material={materials.PaletteMaterial001}
            />
        </a.group>
    );
}

export default Island
